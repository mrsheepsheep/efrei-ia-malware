
import os
import argparse
import joblib
import sklearn
import pickle
import pandas
from functions import *

ALGORITHMS = ['Knn', 'AdaBoost', 'DecisionTree', 'GNB', 'GradientBoosting', 'RandomForest']
if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Analyse un PE.')
    parser.add_argument('-d', '--directory', help='Dossier a traiter.', action='store_true')
    parser.add_argument('-a', '--algo', help='Algorithme: Knn, RandomForest, GradientBoosting, GNB, DecisionTree, AdaBoost')
    parser.add_argument('file', help='PE a tester')
    args = parser.parse_args()

    algo = 'RandomForest'
    if args.algo:
        if args.algo in ALGORITHMS + ['ALL']:
            algo = args.algo
        else:
            print('Algorithme incorrect. Selection du mode RandomForest.')
    else:
        print('Selection du mode RandomForest.')
    
    # Chargement du classifier
    algorithms = ALGORITHMS
    classifiers = {}
    if algo != 'ALL':
        algorithms = [algo]
    
    for algo in algorithms:
        classifiers[algo] = joblib.load('classifier/{0}.pkl'.format(algo))
    
    with open('classifier/features.pkl', 'rb') as features_file:
        features = pickle.load(features_file)
    
    path = args.file
    if (args.directory):
        allfiles = os.listdir(path)
        i = 0
        for filename in allfiles:
            i+=1
            try:
                data = extract_infos(os.path.join(path, filename))
                pe_features = list(map(lambda x:data[x], features))
                for classifier in classifiers:
                    result = not classifier.predict([pe_features])[0]
                    print('[{4}][{0}/{1}] {2} {3}'.format(i, len(allfiles), filename, ['Legit', 'Malware'][result], algo))
            except pefile.PEFormatError:
                    print('[{0}/{1}] {2} Error'.format(i, len(allfiles), filename))
    else:
        data = extract_infos(path)
        # print(pandas.DataFrame(data.values(), data.keys()))
        # print('-------------------------------------------')
        pe_features = list(map(lambda x:data[x], features))
        # print(md5(path))
        for algo in classifiers.keys():
            result = not classifiers[algo].predict([pe_features])[0]
            print('{:16} {:>20}'.format(algo, ['Legit', 'Malware'][result]))