# -*- coding: utf-8 -*-

from flask import Flask, abort, request, redirect, url_for, jsonify, render_template
from flask_cors import CORS
from werkzeug.utils import secure_filename

from functions import *

import os
import joblib
import pickle

# configuration
DEBUG = True

ALGORITHMS = ['Knn', 'AdaBoost', 'DecisionTree', 'GNB', 'GradientBoosting', 'RandomForest']
classifiers = {}

# instantiate the app
app = Flask(__name__, static_url_path='')
app.config.from_object(__name__)
app.config['MAX_CONTENT_LENGTH'] = 32 * 1024 * 1024 # 32MB
app.config['UPLOAD_FOLDER'] = './uploaded_files'
app.secret_key = b'M@lW@R34n41i5i5'

# enable CORS
CORS(app, resources={r'/*': {'origins': '*'}})


def allowed_file(filename):
    return '.' in filename    

@app.route('/')
def index():
    return open('index.html', 'r').read()

@app.route('/analyze', methods=['POST', 'GET'])
def analyze_file():
    if request.method == 'POST':
        if 'file' not in request.files:
            return jsonify(error="Aucun fichier.")
        f = request.files['file']
        if f.filename == '':
            return jsonify(error="Aucun fichier.")
        if f and allowed_file(f.filename):
            filename = secure_filename(f.filename)
            filepath = os.path.join(app.config['UPLOAD_FOLDER'], filename)

            algo = request.form.get('algorithm')
            if not algo in ALGORITHMS:
                print('Received file with invalid algorithm')
                return jsonify(error='Algorithme inconnu.')
            try:
                f.save(filepath)
                # Analyze
                data = extract_infos(filepath)
                pe_features = list(map(lambda x:data[x], features))
                data['Algorithm'] = algo
                data['md5'] = md5(filepath)
                legitimate = bool(classifiers[algo].predict([pe_features])[0])
                return jsonify({'result': data, 'legitimate': legitimate})
            except pefile.PEFormatError:
                os.remove(filepath)
                print('Received an invalid file.')
                return jsonify(error="Ce n'est pas un fichier PE !")
    return abort(404, description="Un probl√®me ?")

if __name__ == '__main__':

    print('Loading features...')
    # Load features
    with open('classifier/features.pkl', 'rb') as features_file:
        features = pickle.load(features_file)
    print('Loading classifiers...')
    for algo in ALGORITHMS:
        classifiers[algo] = joblib.load('classifier/{0}.pkl'.format(algo))
    print('Machine learning check ready.')
    app.run(host='0.0.0.0')